/*
 *Bienvenido a "M2025", nuestra calculadora de matrices. Esta calculadora le va 
permitir obtener las soluciones para sistemas de ecuaciones con hasta 5 incògnitas
y 5 ecuaciones, por el mètodo de Gauss-Jordan (Vèase el manual de usuario para
comprender el funcionamiento del mètodo).
*Esta aplicaciòn se creò el 06/05/2015, por Renè Melèndez (A01560704, autor original)
y fue tambièn Renè Melèndez (A01560704) quien lo modificò por ùltima vez tambièn 
el 06/05/2015. Los programas que llaman a esta calculadora son Gauss.java, y a 
su vez, èsta no llama ningun programa. 

A continuacion encontrarà el còdigo en sì, con comentarios en cada secciòn
explicando brevemente el funcionamiento de cada una 
 * 
 * 
 */

import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author
 */
public class interfaz extends javax.swing.JFrame {

    GaussCalculator calculator;
    
    /**
     * Creates new form interfaz
     */
    private double[][] matrix = new double[5][6];

    public interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
                                   
                                   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        a01 = new javax.swing.JTextField();
        a02 = new javax.swing.JTextField();
        a04 = new javax.swing.JTextField();
        a03 = new javax.swing.JTextField();
        a05 = new javax.swing.JTextField();
        a11 = new javax.swing.JTextField();
        a12 = new javax.swing.JTextField();
        a13 = new javax.swing.JTextField();
        a14 = new javax.swing.JTextField();
        a15 = new javax.swing.JTextField();
        a21 = new javax.swing.JTextField();
        a22 = new javax.swing.JTextField();
        a23 = new javax.swing.JTextField();
        a24 = new javax.swing.JTextField();
        a25 = new javax.swing.JTextField();
        a31 = new javax.swing.JTextField();
        a32 = new javax.swing.JTextField();
        a33 = new javax.swing.JTextField();
        a34 = new javax.swing.JTextField();
        a35 = new javax.swing.JTextField();
        a41 = new javax.swing.JTextField();
        a42 = new javax.swing.JTextField();
        a45 = new javax.swing.JTextField();
        a43 = new javax.swing.JTextField();
        a44 = new javax.swing.JTextField();
        a06 = new javax.swing.JTextField();
        a16 = new javax.swing.JTextField();
        a26 = new javax.swing.JTextField();
        a36 = new javax.swing.JTextField();
        a46 = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        calculate_button = new javax.swing.JButton();
        label_v = new javax.swing.JLabel();
        label_x = new javax.swing.JLabel();
        label_y = new javax.swing.JLabel();
        label_r = new javax.swing.JLabel();
        labe_w = new javax.swing.JLabel();
        label_z = new javax.swing.JLabel();
        clean_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        a01.setText("1");
        a01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a01ActionPerformed(evt);
            }
        });

        a02.setText("2");

        a04.setText("0");
        a04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a04ActionPerformed(evt);
            }
        });

        a03.setText("3");

        a05.setText("0");

        a11.setText("4");

        a12.setText("5");

        a13.setText("6");

        a14.setText("0");

        a15.setText("0");

        a21.setText("7");

        a22.setText("8");

        a23.setText("1");

        a24.setText("0");

        a25.setText("0");

        a31.setText("0");

        a32.setText("0");

        a33.setText("0");

        a34.setText("0");

        a35.setText("0");

        a41.setText("0");

        a42.setText("0");

        a45.setText("0");

        a43.setText("0");

        a44.setText("0");

        a06.setText("10");

        a16.setText("20");

        a26.setText("30");

        a36.setText("0");

        a46.setText("0");

        resultArea.setColumns(20);
        resultArea.setRows(5);
        scrollPane.setViewportView(resultArea);

        calculate_button.setText("Calcular");
        calculate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_buttonActionPerformed(evt);
            }
        });

        label_v.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_v.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_v.setText("V");

        label_x.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_x.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_x.setText("X");

        label_y.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_y.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_y.setText("Y");

        label_r.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_r.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_r.setText("R");

        labe_w.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labe_w.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labe_w.setText("W");

        label_z.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_z.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_z.setText("Z");

        clean_button.setText("Limpiar");
        clean_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clean_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(calculate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(261, 261, 261))))
            .addGroup(layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(a41, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(a31, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(a21, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(a11, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(a01, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label_v, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(a12, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a13, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a15, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(a16, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(a22, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a23, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a24, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a25, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(a26, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(a32, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a33, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a34, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(a35, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(a36, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labe_w, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(label_x, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(a02, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(a03, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(a04, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(a05, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(a06, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_y, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label_z, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(label_r, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(a42, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(a43, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(a44, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(a45, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(a46, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clean_button)
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_v)
                    .addComponent(label_x)
                    .addComponent(label_r)
                    .addComponent(label_y)
                    .addComponent(labe_w)
                    .addComponent(label_z))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a01, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a02, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a03, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a04, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a05, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a06, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a21, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a22, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a23, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a24, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a25, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a26, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a31, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a32, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a33, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a34, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a35, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a36, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a41, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a42, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a43, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a44, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a45, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a46, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clean_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculate_button, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void calculate_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate_buttonActionPerformed
        int size = 2;
        
        for (int i = 0; i < 5; i++) { // Reset matrix to avoid errors
            for (int n = 0; n < 6; n++) {
                matrix[i][n] = 0;
            }
        }
        
        setMatrix();
        
        // This define the matrix size, testing that if a row or column is of 0, then the size reduces
        if (matrix[4][0] != 0 || matrix[4][1] != 0 || matrix[4][2] != 0 || matrix[4][3] != 0 || matrix[4][4] != 0 || matrix[4][5] != 0) {
            size = 5;
        } else if (matrix[3][0] != 0 || matrix[3][1] != 0 || matrix[3][2] != 0 || matrix[3][3] != 0 || matrix[3][4] != 0 || matrix[3][5] != 0) {
            size = 4;
        } else if (matrix[2][0] != 0 || matrix[2][1] != 0 || matrix[2][2] != 0 || matrix[2][3] != 0 || matrix[2][4] != 0 || matrix[2][5] != 0) {
            size = 3;
        }
        
        calculator = new GaussCalculator(size, matrix, resultArea);

        calculator.calculateValues();
        
        double[] value = new double[6];
        double values_making_zero;
        double pivot_first_value;
//Desarrollo del mètodo como tal. Aqùi se va haciendo 1 el pivote y se sigue con el proceso propio
        // n es el primer valor del elemento que servira de pivote, val2 representa los diferentes valores
        //que se van haciendo cero debajo del pivote. NO SE DECLARARON MAS VALORES PARA DECLARAR
        //LA MENOR CANTIDAD DE LINEAS POSIBLES
        
        // Los "if(n==0)" son para cuando hay mùltiple soluciòn, se ejecuta el còdigo con el cual se toma
        // el valor que se solicita al usuario para dar una solucion. El "if(tamaño)" sirve para indicar 
        //hasta donde se tiene que ejecutar el còdigo, delimita que tanto debe usarse para poder solucionar la matriz 
        //generada en funciòn del nùmero de incògnitas
        pivot_first_value = matrix[0][0];
        for (int i = 0; i < 6; i++) {
            matrix[0][i] = matrix[0][i] / pivot_first_value;
        }

        values_making_zero = matrix[1][0];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[0][i] * - values_making_zero;
            matrix[1][i] = value[i] + matrix[1][i];
        }
        values_making_zero = matrix[2][0];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[0][i] * - values_making_zero;
            matrix[2][i] = value[i] + matrix[2][i];
        }
        values_making_zero = matrix[3][0];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[0][i] * - values_making_zero;
            matrix[3][i] = value[i] + matrix[3][i];
        }
        values_making_zero = matrix[4][0];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[0][i] * - values_making_zero;
            matrix[4][i] = value[i] + matrix[4][i];
        }
        showMatrix(matrix);

        pivot_first_value = matrix[1][1];
        if (pivot_first_value==0){
                multipleSolutionMethod(matrix,size);
            }
            else{
        for (int i = 0; i < 6; i++) {
            matrix[1][i] = matrix[1][i] / pivot_first_value;
        }

        values_making_zero = matrix[0][1];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[1][i] * - values_making_zero;

            matrix[0][i] = value[i] + matrix[0][i];

        }

        values_making_zero = matrix[2][1];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[1][i] * - values_making_zero;
            matrix[2][i] = value[i] + matrix[2][i];

        }
        values_making_zero = matrix[3][1];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[1][i] * - values_making_zero;
            matrix[3][i] = value[i] + matrix[3][i];

        }
        values_making_zero = matrix[4][1];
        for (int i = 0; i < 6; i++) {
            value[i] = matrix[1][i] * - values_making_zero;
            matrix[4][i] = value[i] + matrix[4][i];

        }
        showMatrix(matrix);
        }

        if (size >= 3) {
            pivot_first_value = matrix[2][2];
            if (pivot_first_value==0){
                multipleSolutionMethod(matrix,size);
            }
            else{
            for (int i = 0; i < 6; i++) {
                matrix[2][i] = matrix[2][i] / pivot_first_value;
            }
            values_making_zero = matrix[0][2];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[2][i] * - values_making_zero;
                matrix[0][i] = value[i] + matrix[0][i];

            }
            values_making_zero = matrix[1][2];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[2][i] * - values_making_zero;
                matrix[1][i] = value[i] + matrix[1][i];

            }

            values_making_zero = matrix[3][2];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[2][i] * - values_making_zero;
                matrix[3][i] = value[i] + matrix[3][i];

            }
            values_making_zero = matrix[4][2];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[2][i] * - values_making_zero;
                matrix[4][i] = value[i] + matrix[4][i];

            }
            showMatrix(matrix);
            }
        }
        if (size >= 4) {
            pivot_first_value = matrix[3][3];
            if (pivot_first_value==0){
                multipleSolutionMethod(matrix,size);
            }
            else{
            for (int i = 0; i < 6; i++) {
                matrix[3][i] = matrix[3][i] / pivot_first_value;
            }
            values_making_zero = matrix[0][3];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[3][i] * - values_making_zero;
                matrix[0][i] = value[i] + matrix[0][i];

            }
            values_making_zero = matrix[1][3];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[3][i] * - values_making_zero;
                matrix[1][i] = value[i] + matrix[1][i];

            }

            values_making_zero = matrix[2][3];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[3][i] * - values_making_zero;
                matrix[2][i] = value[i] + matrix[2][i];

            }
            values_making_zero = matrix[4][3];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[3][i] * - values_making_zero;
                matrix[4][i] = value[i] + matrix[4][i];

            }
            showMatrix(matrix);}
        }
        if (size == 5) {
            pivot_first_value = matrix[4][4];
            if (pivot_first_value==0){
                multipleSolutionMethod(matrix,size);
            }
            else{
            for (int i = 0; i < 6; i++) {
                matrix[4][i] = matrix[4][i] / pivot_first_value;
            }
            values_making_zero = matrix[0][4];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[4][i] * - values_making_zero;
                matrix[0][i] = value[i] + matrix[0][i];

            }
            values_making_zero = matrix[1][4];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[4][i] * - values_making_zero;
                matrix[1][i] = value[i] + matrix[1][i];

            }

            values_making_zero = matrix[2][4];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[4][i] * - values_making_zero;
                matrix[2][i] = value[i] + matrix[2][i];

            }
            values_making_zero = matrix[3][4];
            for (int i = 0; i < 6; i++) {
                value[i] = matrix[4][i] * - values_making_zero;
                matrix[3][i] = value[i] + matrix[3][i];

            }
            showMatrix(matrix);}

        }
        //Los siguientes "if" son para mostrar el resultado de acuerdo al tamañó de la matriz
        //pues una de cico incògnitas muestra mas resultados que una de 3, por ejemplo :)
        if(size==2){
            if (matrix[0][0] == 1 && matrix[1][1] == 1) {
                resultArea.append(" V= " + matrix[0][5] + "\n W= " + matrix[1][5]);
            } else if (matrix[1][0] == 0 && matrix[1][1] == 0 && matrix[1][5] > 0) {
                resultArea.append("Inconsistencia");
            } 
        }
        if (size == 3) {
            if (matrix[0][0] == 1 && matrix[1][1] == 1 && matrix[2][2] == 1) {
                resultArea.append(" V= " + matrix[0][5] + "\n W= " + matrix[1][5] + "\n X= "
                        + matrix[2][5]);
            } else if (matrix[2][0] == 0 && matrix[2][1] == 0 && matrix[2][2] == 0
                    && matrix[2][5] > 0) {
                resultArea.append("Inconsistencia");
            } 
        }
        if (size == 4) {
            if (matrix[0][0] == 1 && matrix[1][1] == 1 && matrix[2][2] == 1 && matrix[3][3] == 1) {
                resultArea.append(" V= " + matrix[0][5] + "\n W= " + matrix[1][5] + "\n X= "
                        + matrix[2][5] + "\n Y= " + matrix[3][5]);
            } else if (matrix[3][0] == 0 && matrix[3][1] == 0 && matrix[3][2] == 0 && matrix[3][3] == 0
                    && matrix[3][5] > 0) {
                resultArea.append("Inconsistencia");
            } 

        }
        if (size == 5) {
            if (matrix[0][0] == 1 && matrix[1][1] == 1 && matrix[2][2] == 1 && matrix[3][3] == 1
                    && matrix[4][4] == 1) {
                resultArea.append(" V= " + matrix[0][5] + "\n W= " + matrix[1][5] + "\n X= "
                        + matrix[2][2] + "\n Y= " + matrix[3][5] + "\n Z= " + matrix[4][5]);
            } else if (matrix[4][0] == 0 && matrix[4][1] == 0 && matrix[4][2] == 0 && matrix[4][3] == 0
                    && matrix[4][4] == 0 && matrix[4][5]>0) {
                resultArea.append("Inconsistencia");
            } 

        }


    }//GEN-LAST:event_calculate_buttonActionPerformed

    public void setMatrix(){
        resultArea.setText("");// Clean up Text Area (if it was already used)
        
        // Add values to matrix
        matrix[0][0] = Double.parseDouble(a01.getText());
        matrix[0][1] = Double.parseDouble(a02.getText());
        matrix[0][2] = Double.parseDouble(a03.getText());
        matrix[0][3] = Double.parseDouble(a04.getText());
        matrix[0][4] = Double.parseDouble(a05.getText());
        matrix[0][5] = Double.parseDouble(a06.getText());
        matrix[1][0] = Double.parseDouble(a11.getText());
        matrix[1][1] = Double.parseDouble(a12.getText());
        matrix[1][2] = Double.parseDouble(a13.getText());
        matrix[1][3] = Double.parseDouble(a14.getText());
        matrix[1][4] = Double.parseDouble(a15.getText());
        matrix[1][5] = Double.parseDouble(a16.getText());
        matrix[2][0] = Double.parseDouble(a21.getText());
        matrix[2][1] = Double.parseDouble(a22.getText());
        matrix[2][2] = Double.parseDouble(a23.getText());
        matrix[2][3] = Double.parseDouble(a24.getText());
        matrix[2][4] = Double.parseDouble(a25.getText());
        matrix[2][5] = Double.parseDouble(a26.getText());
        matrix[3][0] = Double.parseDouble(a31.getText());
        matrix[3][1] = Double.parseDouble(a32.getText());
        matrix[3][2] = Double.parseDouble(a33.getText());
        matrix[3][3] = Double.parseDouble(a34.getText());
        matrix[3][4] = Double.parseDouble(a35.getText());
        matrix[3][5] = Double.parseDouble(a36.getText());
        matrix[4][0] = Double.parseDouble(a41.getText());
        matrix[4][1] = Double.parseDouble(a42.getText());
        matrix[4][2] = Double.parseDouble(a43.getText());
        matrix[4][3] = Double.parseDouble(a44.getText());
        matrix[4][4] = Double.parseDouble(a45.getText());
        matrix[4][5] = Double.parseDouble(a46.getText());
    }
    
    public void showMatrix(double[][] ma) {
        // Este còdigo muestra al usuario la forma en la cual se va resolviendo la matriz
        //es decir que muestra el desarrollo del mètodo como tal 
        DecimalFormat decimales = new DecimalFormat("0.000");
        String r = "";
        for (int i = 0; i < 5; i++) {
            for (int m = 0; m < 6; m++) {
                r += decimales.format(matrix[i][m]) + " // ";
            }
            r += "\n";
        }
        r += "\n";
        resultArea.append(r);

    }
    //ESTA SECCIÒN SE ENCARGA DEL CÀLCULO CUANDO SE ESTA TRABAJANDO CON UNA MATRIZ DF 
    //MULTIPLE SOLUCION 
    public void multipleSolutionMethod(double ma[][], int tam){
        int i=Integer.parseInt(JOptionPane.showInputDialog("Multiple solucion Ingrese un numero: "));
        double [] m= new double [5];
        m[tam-1]=i;
        for(int n=tam-1;n>0;n--){
            m[n-1]=matrix[n-1][5]-matrix[n][tam-1]*i;
        }
        for(int n=0;n<tam;n++){
            resultArea.append(m[n]+"\n");
        }
        
        
    }
    private void a01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a01ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_a01ActionPerformed

    private void a04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a04ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_a04ActionPerformed

    private void clean_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clean_buttonActionPerformed
        a01.setText(""+0);
        a02.setText(""+0);
        a03.setText(""+0);
        a04.setText(""+0);
        a05.setText(""+0);
        a06.setText(""+0);
        a11.setText(""+0);
        a12.setText(""+0);
        a13.setText(""+0);
        a14.setText(""+0);
        a15.setText(""+0);
        a16.setText(""+0);
        a21.setText(""+0);
        a22.setText(""+0);
        a23.setText(""+0);
        a24.setText(""+0);
        a25.setText(""+0);
        a26.setText(""+0);
        a31.setText(""+0);
        a32.setText(""+0);
        a33.setText(""+0);
        a34.setText(""+0);
        a35.setText(""+0);
        a36.setText(""+0);
        a41.setText(""+0);
        a42.setText(""+0);
        a43.setText(""+0);
        a44.setText(""+0);
        a45.setText(""+0);
        a46.setText(""+0);
        
    }//GEN-LAST:event_clean_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField a01;
    private javax.swing.JTextField a02;
    private javax.swing.JTextField a03;
    private javax.swing.JTextField a04;
    private javax.swing.JTextField a05;
    private javax.swing.JTextField a06;
    private javax.swing.JTextField a11;
    private javax.swing.JTextField a12;
    private javax.swing.JTextField a13;
    private javax.swing.JTextField a14;
    private javax.swing.JTextField a15;
    private javax.swing.JTextField a16;
    private javax.swing.JTextField a21;
    private javax.swing.JTextField a22;
    private javax.swing.JTextField a23;
    private javax.swing.JTextField a24;
    private javax.swing.JTextField a25;
    private javax.swing.JTextField a26;
    private javax.swing.JTextField a31;
    private javax.swing.JTextField a32;
    private javax.swing.JTextField a33;
    private javax.swing.JTextField a34;
    private javax.swing.JTextField a35;
    private javax.swing.JTextField a36;
    private javax.swing.JTextField a41;
    private javax.swing.JTextField a42;
    private javax.swing.JTextField a43;
    private javax.swing.JTextField a44;
    private javax.swing.JTextField a45;
    private javax.swing.JTextField a46;
    private javax.swing.JButton calculate_button;
    private javax.swing.JButton clean_button;
    private javax.swing.JLabel labe_w;
    private javax.swing.JLabel label_r;
    private javax.swing.JLabel label_v;
    private javax.swing.JLabel label_x;
    private javax.swing.JLabel label_y;
    private javax.swing.JLabel label_z;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
